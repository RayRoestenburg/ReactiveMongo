mongo-async-driver {
  actor {
    debug {
      # enable DEBUG logging of all AutoReceiveMessages (Kill, PoisonPill and the like)
      # autoreceive = on
      # enable DEBUG logging of actor lifecycle changes
      # lifecycle = on
    }
  }
  # Set enable-ssl to true to use SSL for all connections.
  enable-ssl = false

  ssl {
    # The commented section below is the Java Key Store which contains the trusted certificates
    # The default trust store is used if the below trust-store section is omitted entirely.
    # Both path and password are required when the trust-store section is specified.
    # trust-store {
    #   # Example: "/etc/ssl/myTrustStore.jks"
    #   path = ""
    #   password = ""
    # }

    # Protocol to use for SSL encryption, choose from:
    # Java 6 & 7:
    #   'SSLv3', 'TLSv1'
    # Java 7:
    #   'TLSv1.1', 'TLSv1.2'
    protocol = "TLSv1.2"

    # Example: ["TLS_RSA_WITH_AES_128_CBC_SHA", "TLS_RSA_WITH_AES_256_CBC_SHA"]
    # You need to install the JCE Unlimited Strength Jurisdiction Policy
    # Files to use AES 256.
    # More info here:
    # http://docs.oracle.com/javase/7/docs/technotes/guides/security/SunProviders.html#SunJCEProvider
    enabled-algorithms = ["TLS_RSA_WITH_AES_128_CBC_SHA"]

    # There are three options, in increasing order of security:
    # "" or SecureRandom => (default)
    # "SHA1PRNG" => Can be slow because of blocking issues on Linux
    # "AES128CounterSecureRNG" => fastest startup and based on AES encryption
    # algorithm
    # "AES256CounterSecureRNG"
    # The following use one of 3 possible seed sources, depending on
    # availability: /dev/random, random.org and SecureRandom (provided by Java)
    # "AES128CounterInetRNG"
    # "AES256CounterInetRNG" (Install JCE Unlimited Strength Jurisdiction
    # Policy Files first)
    # Setting a value here may require you to supply the appropriate cipher
    # suite (see enabled-algorithms section above)
    random-number-generator = ""
  }
}
